# Author: Siphiwe Msibi(siphiwe.msibi@live.com)
# An Azure Pipeline that dockerizes an application and deploys it to AWS EKS
# Requires: AWS K8S service connection, AWS Auth service connection and ECR ID, AWS Region

trigger:
- master

resources:
- repo: self

variables:
  tag: '$(Build.BuildNumber)'

## Build stage
stages:
- stage: Build
  displayName: Build Docker Image and push to ECR
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: AWSShellScript@1
      displayName: Build and tag an image using the Dockerfile
      inputs:
        awsCredentials: 'TebogoAWS'
        regionName: '$(AWS_REGION)'
        scriptType: 'inline'
        inlineScript: |
          # Build, tag and push docker image to ECR
      
          aws ecr get-login-password --region $(AWS_REGION) | docker login --username AWS --password-stdin $(ECR_ID).dkr.ecr.$(AWS_REGION).amazonaws.com
                
          docker build -t $(Build.Repository.Name):$(Build.BuildNumber) -f $(Build.SourcesDirectory)/Dockerfile .
                
          docker tag $(Build.Repository.Name):$(Build.BuildNumber) $(ECR_ID).dkr.ecr.$(AWS_REGION).amazonaws.com/$(Build.Repository.Name):$(Build.BuildNumber)
          # Just for troubleshooting, this can be removed or indented       
          docker images
         
    - task: ECRPushImage@1
      displayName: Push the image to the AWS ECR
      inputs:
        awsCredentials: 'TebogoAWS'
        regionName: '$(AWS_Region)'
        imageSource: 'imagename'
        sourceImageName: '$(Build.Repository.Name)'
        sourceImageTag: '$(Build.BuildNumber)'
        repositoryName: '$(Build.Repository.Name)'
        pushTag: '$(Build.BuildNumber)'
        autoCreateRepository: true
        forceDockerNamingConventions: true

    - task: CopyFiles@2
      displayName: Copy application yaml files to the artifacts for release stage
      inputs:
        Contents: '**yaml'
        TargetFolder: '$(build.artifactstagingdirectory)'
    
    - task: PublishBuildArtifacts@1
      displayName: Place the artifacts to the 
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

##Deploy Stage
- stage: Deploy
  displayName: Deploy or update the app manifest to AWS EKS
  dependsOn: Build
  condition: succeeded('Build')
  jobs:
    - job: Deploy
      displayName: Deploy to AWS EKS
      pool:
        vmImage: ubuntu-latest
      steps:
      
      - task: DownloadBuildArtifacts@0
        displayName: Download the build artifect
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'drop'
          downloadPath: '$(System.ArtifactsDirectory)'

      # - task: Kubernetes@1
      #   displayName: Kubectl apply
      #   inputs:
      #     connectionType: 'Kubernetes Service Connection'
      #     kubernetesServiceEndpoint: 'Tebogo-EKS'
      #     command: 'apply'
      #     useConfigurationFile: true
      #     configuration: '$(System.ArtifactsDirectory)/drop/app-manifest.yaml'
      #     secretType: 'dockerRegistry'
      #     containerRegistryType: 'Container Registry'

      # - task: Kubernetes@1
      #   displayName: Kubectl set
      #   inputs:
      #     connectionType: 'Kubernetes Service Connection'
      #     kubernetesServiceEndpoint: 'Tebogo-EKS'
      #     command: 'set'
      #     arguments: 'image deployments/deployment-tebs-python tebs-python=$(ECR_ID).dkr.ecr.$(AWS_REGION).amazonaws.com/$(Build.Repository.Name):$(Build.BuildNumber)'
      #     secretType: 'dockerRegistry'
      #     containerRegistryType: 'Container Registry'

      - task: Kubernetes@1
        inputs:
          connectionType: 'Kubernetes Service Connection'
          kubernetesServiceEndpoint: 'Tebogo-EKS'
          command: 'apply'
          useConfigurationFile: true
          configuration: '$(System.ArtifactsDirectory)/drop/app-manifest.yaml'
          secretType: 'dockerRegistry'
          containerRegistryType: 'Container Registry'
          dockerRegistryEndpoint: 'tebogo-aws-ecr'
          secretName: 'default-token-zp492'
          forceUpdate: false

      - task: Kubernetes@1
        inputs:
          connectionType: 'Kubernetes Service Connection'
          kubernetesServiceEndpoint: 'Tebogo-EKS'
          command: 'set'
          arguments: 'image deployments/deployment-tebs-python tebs-python=$(ECR_ID).dkr.ecr.$(AWS_REGION).amazonaws.com/$(Build.Repository.Name):$(Build.BuildNumber)'
          secretType: 'dockerRegistry'
          containerRegistryType: 'Container Registry'
          dockerRegistryEndpoint: 'tebogo-aws-ecr'
          secretName: 'default-token-zp492'
          forceUpdate: false
